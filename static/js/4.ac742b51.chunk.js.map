{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogsItem/DialogsItem.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogsItem","props","path","id","className","classes","dialog","to","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","TextArea","validate","required","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","message","isAuth","dialogsItem","values","addMessage","newMessageBody","compose","connect","dispatch","addMessageActionCreator","withAuthRedirect"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,0BAA0B,QAAU,2B,qGCkBhIC,EATK,SAACC,GACjB,IAAIC,EAAO,WAAaD,EAAME,GAC9B,OACI,qBAAKC,UAAWC,IAAQC,OAAxB,SACI,cAAC,IAAD,CAASC,GAAIL,EAAb,SAAoBD,EAAMO,U,kCCkDhCC,EAAcC,YAAiB,IAa/BC,EAAsBC,YAA2B,CAACC,KAAM,kBAAlCD,EAXxB,SAACX,GACD,OAEA,uBAAMa,SAAUb,EAAMc,aAAtB,UACI,cAACC,EAAA,EAAD,CAAQC,YAAa,eAAgBT,KAAM,iBACnCU,UAAWC,IAAUC,SAAU,CAACC,IAAUZ,KAElD,8BAAK,0DAKEa,EAnDC,SAACrB,GACb,IAAIsB,EAAQtB,EAAMuB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAapB,KAAMoB,EAAEpB,KAAML,GAAIyB,EAAEzB,IAASyB,EAAEzB,OAGrF0B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAavB,KAAMuB,EAAEC,QAAS7B,GAAI4B,EAAE5B,IAAS4B,EAAE5B,OAQ5F,OAAKF,EAAMgC,OAKT,sBAAK7B,UAAWC,IAAQqB,QAAxB,UACI,qBAAKtB,UAAWC,IAAQ6B,YAAxB,SACKT,IAIL,sBAAKrB,UAAWC,IAAQyB,SAAxB,UACKD,EACJ,8BAEG,cAAClB,EAAD,CAAqBG,SApBb,SAACqB,GACjBlC,EAAMmC,WAAWD,EAAOE,2BAIA,cAAC,IAAD,CAAU9B,GAAK,Y,yBCpBhC+B,sBACXC,aAdgB,SAAChB,GACjB,MAAO,CACPC,YAAaD,EAAMC,gBAKA,SAACgB,GACpB,MAAO,CACCJ,WAAY,SAACC,GAA2BG,EAASC,YAAwBJ,SAMjFK,IAFWJ,CAGdhB","file":"static/js/4.ac742b51.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3c5wj\",\"dialogsItem\":\"Dialogs_dialogsItem__1vi0n\",\"messages\":\"Dialogs_messages__16vpu\",\"message\":\"Dialogs_message__2NuPD\"};","import React from \"react\";\r\nimport classes from \"./../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype dialogsItemProps = {\r\n    name: string,\r\n    id: number\r\n}\r\n\r\nconst DialogsItem = (props: dialogsItemProps) => {\r\n    let path = '/dialogs' + props.id;\r\n    return (\r\n        <div className={classes.dialog}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogsItem;","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogsItem from \"./DialogsItem/DialogsItem\";\r\nimport  {Field, reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport {TextArea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../Utils/Validators/validators\";\r\n\r\n\r\n// // type DialogsTypeProps = {\r\n// //     id: number\r\n// //     message: string\r\n// //     name: string\r\n// //     addMessage: () => void\r\n// //     onMessageChange: (text: string) => void\r\n// //     dialogs: { id: number, name: string}\r\n// //     messages: {id: number, message: string}\r\n// //     dialogsPage: Array<DialogsPageType>\r\n// //     newMessageText: string\r\n// }\r\n\r\ntype MessageDataType = {\r\n    newMessageBody: string\r\n\r\n}\r\n\r\n\r\nconst Dialogs = (props: any) => {\r\n    let state = props.dialogsPage;\r\n    // @ts-ignore\r\n    let dialogsElements = state.dialogs.map(d => <DialogsItem name={d.name} id={d.id} key={d.id}/>)\r\n\r\n// @ts-ignore\r\n    let messagesElements = state.messages.map(m => <DialogsItem name={m.message} id={m.id} key={m.id}/>)\r\n\r\n\r\n    let addNewMessage = (values: MessageDataType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    };\r\n\r\n\r\n      if (!props.isAuth) return <Redirect to ={'/Login'} />;\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItem}>\r\n                {dialogsElements}\r\n\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                {messagesElements}\r\n             <div>\r\n\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n             </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\nconst AddMessageForm:React.FC<InjectedFormProps<MessageDataType>> =\r\n    (props)=> {\r\n    return(\r\n\r\n    <form onSubmit={props.handleSubmit}>\r\n        <Field  placeholder={'Send message'} name={'newMessageBody'}\r\n                component={TextArea} validate={[required, maxLength50 ]}/>\r\n\r\n        <div><button >Send message</button></div>\r\n    </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm<MessageDataType>({form: 'addMessageForm'})(AddMessageForm);\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport {addMessageActionCreator} from \"../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\nlet mapStateToProps=(state: any)=>{\r\n    return {\r\n    dialogsPage: state.dialogsPage,\r\n       }\r\n}\r\n\r\n\r\nlet mapDispatchToProps=(dispatch:any)=>{\r\n    return {\r\n            addMessage: (newMessageBody: string)=>{ dispatch(addMessageActionCreator(newMessageBody))}\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)\r\n(Dialogs)\r\n;"],"sourceRoot":""}